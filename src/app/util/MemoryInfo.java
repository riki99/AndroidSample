package app.util;import java.text.DecimalFormat;import android.app.Activity;import android.app.ActivityManager;import android.os.Bundle;import android.util.Log;import com.satton.R;public class MemoryInfo {	public static String getMemoryInfo(Activity ac) {		ActivityManager am = ((ActivityManager) ac				.getSystemService(Activity.ACTIVITY_SERVICE));		// メモリ情報の取得		ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();		am.getMemoryInfo(memoryInfo);		// システムの利用可能な空きメモリ		Log.i("MemoryInfo", "memoryInfo.availMem = "				+ format(memoryInfo.availMem / 1024));		// 低メモリ(LowMemory)状態の閾値		Log.i("MemoryInfo", "memoryInfo.threshold = "				+ format(memoryInfo.threshold / 1024));		// 低メモリ状態を示すフラグ(trueでメモリ不足状態)		Log.i("MemoryInfo", "memoryInfo.lowMemory = " + memoryInfo.lowMemory);		// 自プロセスが使用中のメモリー		int[] pids = new int[1];		pids[0] = android.os.Process.myPid();		android.os.Debug.MemoryInfo[] dmi = am.getProcessMemoryInfo(pids);		// 使用中のメモリーサイズ(KB)		Log.i("MemoryInfo",				"TotalPrivate:" + format(dmi[0].getTotalPrivateDirty()));		// プロセスの使用メモリ合計サイズ(KB)		Log.i("MemoryInfo", "TotalPss:" + format(dmi[0].getTotalPss()));		// 共有メモリーの使用合計サイズ(KB)		Log.i("MemoryInfo",				"TotalShared:" + format(dmi[0].getTotalSharedDirty()));		long free = Runtime.getRuntime().freeMemory() / 1024;		long total = Runtime.getRuntime().totalMemory() / 1024;		long max = Runtime.getRuntime().maxMemory() / 1024;		long used = total - free;		double ratio = (used * 100 / (double) total);		String info = "VM Memory ： total=%s, used=%s (%s %%), max=%s";		info= String.format(info, format(total), format(used), new DecimalFormat(				"##.#").format(ratio), format(max));		return info;	}	private static String format(long num) {		DecimalFormat f1 = new DecimalFormat("#,###KB");		return f1.format(num);	}}